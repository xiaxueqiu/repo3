-- 1)
DROP TABLE IF EXISTS ods_user;
CREATE EXTERNAL TABLE ods_user(
id  STRING ,   
user_id STRING ,
USER_NAME  STRING ,
PASSWORD  STRING ,
USER_ROLE  STRING ,
DEFAULT_ADDRESS STRING ,
PHONE_NO  STRING ,
CREATED_BY STRING ,
CREATED_TIME STRING ,
UPDATED_BY STRING ,
UPDATED_TIME STRING ,
EMAIL  STRING ,
ID_CARD STRING ,
ACCOUNT_TYPE STRING ,
delete_flag STRING 
) COMMENT 'user'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_user/';

-- load data inpath 'obs://obs-east-bkt001/origin_data/db/user_full/2020-06-14' OVERWRITE into table ods_user partition(dt='2020-06-14',domain='xinhuacun')

-- load data inpath 'obs://obs-east-bkt001/origin_data/db/user_full/2020-06-15/xinhuacun/tenant_0f044adadbd240a08b35a1786b5dc62e' OVERWRITE into table ods_user partition(dt='2020-06-15',domain='xinhuacun',tenant_id='')



-- 2)

DROP TABLE IF EXISTS ods_t_order;
CREATE EXTERNAL TABLE ods_t_order(
id String ,
order_number String ,
customer_id String ,
customer_name String ,
customer_phone String ,
sku_id  String ,
price DECIMAL(24,6) ,
appointment_time String ,
amount BIGINT  ,
remark  String ,
service_detail String ,
payment  DECIMAL(24,6) ,
address  String ,
status  String ,
employee_id  String ,
employee_name String ,
employee_phone String ,
service_img String ,
created_by String ,
created_time String ,
updated_by String ,
updated_time String
) COMMENT 't_order'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_t_order/';


--3)
DROP TABLE IF EXISTS ods_t_task;
CREATE EXTERNAL TABLE ods_t_task(
 id String ,
 customer_id String ,
 order_id String ,
 customer_name String ,
 customer_phone String ,
 appointment_time  String ,
 address String ,
 service_name String ,
 service_detail  String ,
 salary DECIMAL(24,6) ,
 employee_name String ,
 amount BIGINT ,
 employee_id String ,
 task_status  String ,
 created_by  String ,
 created_time String ,
 updated_by  String ,
 updated_time String ,
 delete_flag  String ,
 version   String ,
 remark   String 
) COMMENT 't_task'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_t_task/';


-- 4）
DROP TABLE IF EXISTS ods_t_service_sku;
CREATE EXTERNAL TABLE ods_t_service_sku(
id String,
service_id String,
price DECIMAL(24,6),
created_by String,
created_time String,
updated_by String,
updated_time String,
revision String,
delete_flag String
) COMMENT 't_service_sku'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_t_service_sku/';


-- 5）message

DROP TABLE IF EXISTS ods_message;
CREATE EXTERNAL TABLE ods_message(
id  String,
user_id String,
title String,
content String,
link String,
message_status String,
info_from String,
created_by String,
created_time String,
updated_by String,
updated_time String
) COMMENT 'message'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_message/';


-- 6）t_housekeeper_service

DROP TABLE IF EXISTS ods_t_housekeeper_service;
CREATE EXTERNAL TABLE ods_t_housekeeper_service(
id String,
service_name String,
service_desc String,
img_src String,
created_by String,
created_time String,
updated_by String,
updated_time String,
servie_status String,
delete_flag String,
revision String,
display_price DECIMAL(24,6)
) COMMENT 't_housekeeper_service'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_t_housekeeper_service/';


--7）t_service_option

DROP TABLE IF EXISTS ods_t_service_option;
CREATE EXTERNAL TABLE ods_t_service_option(
id  String,
specification_id String,
name String,
created_by String,
created_time String,
updated_by String,
updated_time String,
revision String,
delete_flag String
) COMMENT 't_service_option'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_t_service_option/';

--8）t_service_specification

DROP TABLE IF EXISTS ods_t_service_specification;
CREATE EXTERNAL TABLE ods_t_service_specification(
id String,
service_id String,
name String,
created_by String,
created_time String,
updated_by String,
updated_time String,
revision String,
delete_flag String
) COMMENT 't_service_specification'
PARTITIONED BY (`dt` STRING,`domain` STRING,`tenant_id` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
NULL DEFINED AS ''
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_t_service_specification/';
	
	
	
	
--9 ods_log

drop table if exists ods_log;
CREATE EXTERNAL TABLE ods_log (`line` string) COMMENT 'ods_log'
PARTITIONED BY (`dt` string) -- 按照时间创建分区
 ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/ods/ods_log';


--9) dwd_page_log

hive (gmall)>


DROP TABLE IF EXISTS dwd_page_log;
CREATE EXTERNAL TABLE dwd_page_log(
`u_ud` STRING COMMENT '访客id',
`uid` STRING COMMENT '用户id',
`tenantDomain` STRING COMMENT '租户id',
`is_new` STRING COMMENT '是否是新用户',
`b_iev` STRING COMMENT '浏览器信息',
`during_time` BIGINT COMMENT '持续时间毫秒',
`page_item` STRING COMMENT '目标id ',
`page_item_type` STRING COMMENT '目标类型',
`last_page_id` STRING COMMENT '上页类型',
`page_id` STRING COMMENT '页面ID ',
`serviceId` STRING COMMENT '服務ID ',
`source_type` STRING COMMENT '来源类型',
`ts` bigint COMMENT '页面跳入时间'
) COMMENT '页面日志表'
PARTITIONED BY (`dt` STRING)
 ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dwd/dwd_page_log';




	
select uid,tenantid,during_time,last_page_id,page_id  from dwd_page_log  


-- 数据导入


`u_ud` STRING COMMENT '访客id',
`uid` STRING COMMENT '用户id',
`terrentid` STRING COMMENT '租户id',
`is_new` STRING COMMENT '是否是新用户',
`b_iev` STRING COMMENT '浏览器信息',
	
	




insert overwrite table dwd_page_log partition(dt='2020-06-14')
select
get_json_object(line,'$.u_ud'),
get_json_object(line,'$.userId'),
get_json_object(line,'$.tenantDomain'),
get_json_object(line,'$.is_new'),
get_json_object(line,'$.b_iev'),
get_json_object(line,'$.msg.information.duringTime'),
get_json_object(line,'$.msg.information.item'),
get_json_object(line,'$.msg.information.item_type'),
get_json_object(line,'$.msg.information.lastPageId'),
get_json_object(line,'$.msg.information.pageId'),
get_json_object(line,'$.msg.information.serviceId'),
get_json_object(line,'$.msg.information.source_type'),
get_json_object(line,'$.msg.ts')
from ods_log
where dt='2020-06-14'
and get_json_object(line,'$.msg.information') is not null;



--9) dwd_action_log   --`item` STRING COMMENT '目标id ',
hive (gmall)>



DROP TABLE IF EXISTS dwd_action_log;
CREATE EXTERNAL TABLE dwd_action_log(
`u_ud` STRING COMMENT '访客id',
`uid` STRING COMMENT '用户id',
`tenantDomain` STRING COMMENT '租户id',
`is_new` STRING COMMENT '是否是新用户',
`b_iev` STRING COMMENT '浏览器信息',
`during_time` BIGINT COMMENT '持续时间毫秒',
`page_item` STRING COMMENT '目标id ',
`page_item_type` STRING COMMENT '目标类型',
`last_page_id` STRING COMMENT '上页类型',
`page_id` STRING COMMENT '页面id ',
`serviceId` STRING COMMENT '服務ID ',
`source_type` STRING COMMENT '来源类型',
`action_id` STRING COMMENT '动作id',
`item_type` STRING COMMENT '目标类型',
`ts` BIGINT COMMENT '动作发生时间'
) COMMENT '动作日志表'
PARTITIONED BY (`dt` STRING)
 ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dwd/dwd_action_log';
	



hadoop fs -mkdir -p "obs://obs-east-bkt001/$1"	


4）创建函数
（1）打包
（2）将hiveudtf-1.0-SNAPSHOT.jar上传到cce02xiaxueqiu的/opt/module，然后再将该jar包上传到obs的/user/hive/jars路径下
hadoop fs -mkdir -p "obs://obs-east-bkt001/user/hive/jars"

 hadoop fs -put hiveudtf-1.0-SNAPSHOT.jar  obs://obs-east-bkt001/user/hive/jars
（3）创建永久函数与开发好的java class关联
hive (gmall)>
create function explode_json_array as 'com.huaweicloud.hive.udtf.ExplodeJSONArray' using jar 'obs://obs-east-bkt001/user/hive/jars/hiveudtf-1.0-SNAPSHOT.jar';
（4）注意：如果修改了自定义函数重新生成jar包怎么处理？只需要替换HDFS路径上的旧jar包，然后重启Hive客户端即可。


----get_json_object(action,'$.action_id'),
insert overwrite table dwd_action_log partition(dt='2020-06-14')
select
get_json_object(line,'$.u_ud'),
get_json_object(line,'$.userId'),
get_json_object(line,'$.tenantDomain'),
get_json_object(line,'$.is_new'),
get_json_object(line,'$.b_iev'),
get_json_object(line,'$.msg.information.duringTime'),
get_json_object(line,'$.msg.information.item'),
get_json_object(line,'$.msg.information.item_type'),
get_json_object(line,'$.msg.information.lastPageId'),
get_json_object(line,'$.msg.information.pageId'),
get_json_object(line,'$.msg.information.serviceId'),
get_json_object(line,'$.msg.information.source_type'),
get_json_object(action,'$.item'),
get_json_object(action,'$.item_type'),
get_json_object(line,'$.msg.ts')
from ods_log lateral view explode_json_array(get_json_object(line,'$.msg.actions')) tmp as action
where dt='2020-06-14'
and get_json_object(line,'$.msg.actions') is not null;



----------------------------


select * from ods_t_service_sku where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';
select * from ods_t_housekeeper_service  where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';
select * from ods_t_order  where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';
select * from ods_t_service_option where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';
select * from ods_t_service_specification where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';
select * from ods_message  where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';
select * from ods_t_task where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';
select * from ods_user where tenant_id = 'tenant_0f044adadbd240a08b35a1786b5dc62e';



select * from ods_t_service_sku where domain = 'xinhuacun';
select * from ods_t_housekeeper_service  where domain = 'xinhuacun';
select * from ods_t_order  where domain = 'xinhuacun';
select * from ods_t_service_option where domain = 'xinhuacun';
select * from ods_t_service_specification where domain = 'xinhuacun';
select * from ods_message  where domain = 'xinhuacun';
select * from ods_t_task where domain = 'xinhuacun';
select * from ods_user where domain = 'xinhuacun';




--３）每日装载
--维度表建表语句
----dim_sku_info
DROP TABLE IF EXISTS dim_sku_info;
CREATE EXTERNAL TABLE dim_sku_info (
`id` STRING,
`service_id` STRING,
`price` DECIMAL(24,6),
`created_by` STRING,
`created_time` STRING,
`updated_by` STRING,
`updated_time` STRING,
`revision` STRING,
`delete_flag` STRING,
`service_name` STRING,
`service_desc` STRING,
`servie_status` STRING,
`display_price` DECIMAL(24,6)
) COMMENT 'dim_sku_info'
PARTITIONED BY (`dt` STRING,`domain` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dim/dim_sku_info/';

------------
DROP TABLE IF EXISTS dim_sku_info;
CREATE EXTERNAL TABLE dim_sku_info (
`id` STRING,
`service_id` STRING,
`price` DECIMAL(24,6),
`created_by` STRING,
`created_time` STRING,
`updated_by` STRING,
`updated_time` STRING,
`revision` STRING,
`delete_flag` STRING,
`service_name` STRING,
`service_desc` STRING,
`servie_status` STRING,
`display_price` DECIMAL(24,6)
) COMMENT 'dim_sku_info'
PARTITIONED BY (`dt` STRING,`domain` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dim/dim_sku_info/';

------------------------
with sku as
(
 select
id,
service_id,
price,
created_by,
created_time,
updated_by,
updated_time,
revision,
delete_flag
from ods_t_service_sku
where dt = '2020-06-14'
and domain='xinhuacun'
),
service as
(
select 
id,
service_name,
service_desc,
servie_status,
display_price
from ods_t_housekeeper_service
where dt = '2020-06-14'
and domain='xinhuacun'
)
 
insert
overwrite
table
dim_sku_info
partition
(
dt='2020-06-14',domain='xinhuacun'
)
select
sku.id,
sku.service_id,
sku.price,
sku.created_by,
sku.created_time,
sku.updated_by,
sku.updated_time,
sku.revision,
sku.delete_flag,
service.service_name,
service.service_desc,
service.servie_status,
service.display_price
from sku
left join service on sku.service_id = service.id;

----===============================================
------------------
with sku as
 (
 select
id,
service_id,
price,
created_by,
created_time,
updated_by,
updated_time,
revision,
delete_flag
 from ods_t_service_sku
where dt = '$do_date' and domain='$domain'
 ),
 service as
 (
 select 
				id,  	
				service_name,  	
				service_desc,  		
				servie_status,   	 		
				display_price  
 from ods_t_housekeeper_service
 where dt = '$do_date'
			 and domain='$domain'
 )
insert
overwrite
table
dim_sku_info
partition
(
dt = '$do_date',domain='$domain'
)
select 
sku.id,
sku.service_id,
sku.price,
sku.created_by,
sku.created_time,
sku.updated_by,
sku.updated_time,
sku.revision,
sku.delete_flag, 	
service.service_name,  	
service.service_desc,  		
service.servie_status,   	   		
service.display_price	
from sku
 left join service on sku.service_id = service.id


------------------------------


---------------

with sku as
(
 select
id,
service_id,
price,
created_by,
created_time,
updated_by,
updated_time,
revision,
delete_flag
from ods_t_service_sku
where dt = '$do_date' and domain='$domain'
),
service as
(
select 
id,
service_name,
service_desc,
servie_status,
display_price
from ods_t_housekeeper_service
where dt = '$do_date' and domain='$domain'
)
 
insert
overwrite
table
dim_sku_info
partition
(
dt='$do_date'',domain='$domain'
)
select
sku.id,
sku.service_id,
sku.price,
sku.created_by,
sku.created_time,
sku.updated_by,
sku.updated_time,
sku.revision,
sku.delete_flag,
service.service_name,
service.service_desc,
service.servie_status,
service.display_price
from sku
left join service on sku.service_id = service.id;
--------------
DROP TABLE IF EXISTS dim_date_info;
CREATE EXTERNAL TABLE dim_date_info(
`date_id` STRING COMMENT '日',
`week_id` STRING COMMENT '周ID',
`week_day` STRING COMMENT '周几',
`day` STRING COMMENT '每月的第几天',
`month` STRING COMMENT '第几月',
`quarter` STRING COMMENT '第几季度',
`year` STRING COMMENT '年',
`is_workday` STRING COMMENT '是否是工作日',
`holiday_id` STRING COMMENT '节假日'
) COMMENT '时间维度表'
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dim/dim_date_info/';

-- hadoop fs -put date_info.txt  obs://obs-east-bkt001/warehouse/hive/dim/dim_date_info/
-- select * from  dim_date_info

-------------==================================
DROP TABLE IF EXISTS dim_user;
CREATE EXTERNAL TABLE dim_user(
id  STRING ,   
user_id STRING ,
USER_NAME  STRING ,
USER_ROLE  STRING ,
DEFAULT_ADDRESS STRING ,
PHONE_NO  STRING ,
CREATED_BY STRING ,
CREATED_TIME STRING ,
UPDATED_BY STRING ,
UPDATED_TIME STRING ,
EMAIL  STRING ,
ID_CARD STRING ,
ACCOUNT_TYPE STRING ,
delete_flag STRING 
) COMMENT 'dim_user'
PARTITIONED BY (`dt` STRING,`domain` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dim/dim_user/';






insert overwrite table dim_user partition(dt='2020-06-14',domain='xinhuacun')
select
id,
user_id,
md5(user_name),
user_role,
default_address,
md5(phone_no),
created_by,
created_time,
updated_by,
updated_time,
md5(email),
md5(id_card),
account_type,
delete_flag
from ods_user
where dt = '2020-06-14' and domain='xinhuacun';



===================
with tmp_login as
         (
             select
                    tenantId,
                    dt,
                    uid,
                    count(*) login_count
                    --求每个用户的登录次数
             from dwd_page_log
             where uid is not null
               --页面日志表里面有访客，也有用户
               and last_page_id is null
               --一个会话
               and tenantId ='xinhuacun'
             group by dt,tenantId, uid
         ),

     tmp_order as
         (
             --访客无法下单
             select date_format(create_time, 'yyyy-MM-dd')                     dt,
                    user_id,
                    count(*)                                                   order_count,
                    --下单次数
                    sum(if(activity_reduce_amount > 0, 1, 0))                  order_activity_count, --订单参与活动次数
                    sum(if(coupon_reduce_amount > 0, 1, 0))                    order_coupon_count,
                    sum(if(activity_reduce_amount>0, activity_reduce_amount, 0)) order_activity_reduce_amount,
                    sum(if(coupon_reduce_amount>0, coupon_reduce_amount, 0))    order_coupon_reduce_amount,
                    sum(original_amount)                                       order_original_amount,
                    sum(final_amount)                                          order_final_amount
             from dwd_order_info
                  --累积型快照事实表
             group by date_format(create_time, 'yyyy-MM-dd'), user_id
             --不能用dt，因为有99分区   用订单创建时间分组
         )







==============



DROP TABLE IF EXISTS dwd_t_order;
CREATE EXTERNAL TABLE dwd_t_order(
id String ,
order_number String ,
uid String ,
customer_name String ,
customer_phone String ,
sku_id  String ,
appointment_time String ,
remark  String ,
service_detail String ,
address  String ,
status  String ,
employee_id  String , 
employee_name String ,
employee_phone String ,
created_time String ,
updated_time String,
price DECIMAL(24,6) ,
amount BIGINT  ,
`original_amount` DECIMAL(16,2) COMMENT '订单原始价格',
`final_amount` DECIMAL(16,2) COMMENT '订单最终价格'
) COMMENT 't_order'
PARTITIONED BY (`dt` STRING,`tenantId` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dwd/dwd_t_order/';




insert overwrite table dwd_t_order partition(dt='2020-06-14',tenantId='xinhuacun')
select
id,
order_number,
customer_id,
customer_name,
customer_phone,
sku_id ,  
appointment_time,
remark,
service_detail,
address,
status,
employee_id,
employee_name,
employee_phone,
created_time,
updated_time,
price,
amount,
payment,
payment
from ods_t_order
where dt = '2020-06-14' and domain='xinhuacun';


=====================


=================
--7.2.2用户主题
DROP TABLE IF EXISTS dws_user_action_daycount;
CREATE EXTERNAL TABLE dws_user_action_daycount
(
`uid` STRING COMMENT '用户id',
`login_count` BIGINT COMMENT '登录次数',
`firstPage` BIGINT COMMENT 'firstPage次数',
`myOrders` BIGINT COMMENT 'myOrders次数',
`seveiceList` BIGINT COMMENT 'seveiceList次数',
`order_count` BIGINT COMMENT '下单次数',
`order_original_amount` DECIMAL(24,6)  COMMENT '订单单原始金额',
`order_final_amount` DECIMAL(24,6) COMMENT '订单总金额'
) COMMENT '每日用户行为'
PARTITIONED BY (`dt` STRING,`tenantId` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dws/dws_user_action_daycount/';

动态分区需要设置严格模式
set hive.exec.dynamic.partition.mode=nonstrict;


---------------
set hive.exec.dynamic.partition.mode=nonstrict;
with
tmp_login as
(
select
tenantId,
 dt,
 uid,
 count(*) login_count
 --求每个用户的登录次数
from dwd_page_log
where uid is not null
and last_page_id is null
--一个会话
and tenantId ='xinhuacun'
group by dt,tenantId, uid
),
tmp_action as
(
select
tenantId,
dt,
uid,
sum(if(action_id='firstPage',1,0)) firstPage,
sum(if(action_id='myOrders',1,0)) myOrders,
sum(if(action_id='seveiceList',1,0)) seveiceList
from dwd_action_log
where uid is not null
and tenantId ='xinhuacun'
and action_id in ('firstPage','myOrders','seveiceList')
group by dt,tenantId, uid
),
tmp_order as
(
select
tenantId,
date_format(created_time,'yyyy-MM-dd') dt,
uid,
count(*) order_count,
sum(original_amount) order_original_amount,
sum(final_amount) order_final_amount
from dwd_t_order
where tenantId ='xinhuacun'
group by date_format(created_time,'yyyy-MM-dd'),tenantId, uid
)
insert overwrite table dws_user_action_daycount partition(dt,tenantId)
select
coalesce(tmp_login.uid,tmp_action.uid,tmp_order.uid),
nvl(login_count,0),
nvl(firstPage,0),
nvl(myOrders,0),
nvl(seveiceList,0),
nvl(order_count,0),
nvl(order_original_amount,0),
nvl(order_final_amount,0),
coalesce(tmp_login.dt,tmp_action.dt,tmp_order.dt),
coalesce(tmp_login.tenantId,tmp_action.tenantId,tmp_order.tenantId)
from tmp_login
full outer join tmp_action
on tmp_login.uid=tmp_action.uid
and tmp_login.dt=tmp_action.dt
and tmp_login.tenantId=tmp_action.tenantId
full outer join tmp_order
on coalesce(tmp_login.uid,tmp_action.uid)=tmp_order.uid
and coalesce(tmp_login.dt,tmp_action.dt)=tmp_order.dt
and coalesce(tmp_login.tenantId,tmp_action.tenantId)=tmp_order.dt
----------------------------------


DROP TABLE IF EXISTS dws_sku_action_daycount;
CREATE EXTERNAL TABLE dws_sku_action_daycount
(
`sku_id` STRING COMMENT 'sku_id',
`order_count` BIGINT COMMENT '被下单次数',
`order_num` BIGINT COMMENT '被下单件数',
`order_original_amount` DECIMAL(24,6) COMMENT '被下单原价金额',
`order_final_amount` DECIMAL(24,6) COMMENT '被下单最终金额'
) COMMENT '每日商品行为'
PARTITIONED BY (`dt` STRING,`tenantId` STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
LOCATION 'obs://obs-east-bkt001/warehouse/hive/dws/dws_sku_action_daycount/';









